/**
 * AnimalRescue API
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jlgartee@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class PublicApi {
    protected basePath = 'https://virtserver.swaggerhub.com/jgartee/AnimalRescue/1.0.0';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * Adds a new Building to the specified Location
     * @summary adds a Building at the specified Location
     * @param locationId 
     * @param building unique id of Building to update
     */
    public addBuildingToLocation (locationId: string, building: models.Building, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling addBuildingToLocation.');
        }

        // verify required parameter 'building' is not null or undefined
        if (building === null || building === undefined) {
            throw new Error('Required parameter building was null or undefined when calling addBuildingToLocation.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: building,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Adds a new Enclosure to the Rescue
     * @summary adds a Enclosure to the rescue
     * @param enclosure Enclosure to add to the Rescue
     */
    public addEnclosure (enclosure: models.Enclosure, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/enclosures';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'enclosure' is not null or undefined
        if (enclosure === null || enclosure === undefined) {
            throw new Error('Required parameter enclosure was null or undefined when calling addEnclosure.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: enclosure,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Adds an item to the system
     * @summary adds an inventory item
     * @param inventoryItem Inventory item to add
     */
    public addInventory (inventoryItem?: models.InventoryItem, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/inventory';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: inventoryItem,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Adds a new Kennel to the Rescue
     * @summary adds a Kennel to the rescue
     * @param kennel Kennel to add to the Rescue
     */
    public addKennel (kennel: models.Kennel, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/kennels';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'kennel' is not null or undefined
        if (kennel === null || kennel === undefined) {
            throw new Error('Required parameter kennel was null or undefined when calling addKennel.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: kennel,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Adds a new Kennel to the specified Room
     * @summary creates a Kennel in the specified Room
     * @param locationId 
     * @param buildingId 
     * @param roomId 
     * @param kennel Room to create
     */
    public addKennelToRoom (locationId: string, buildingId: string, roomId: string, kennel: models.Kennel, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/room/{roomId}/kennels'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)))
            .replace('{' + 'roomId' + '}', encodeURIComponent(String(roomId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling addKennelToRoom.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling addKennelToRoom.');
        }

        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling addKennelToRoom.');
        }

        // verify required parameter 'kennel' is not null or undefined
        if (kennel === null || kennel === undefined) {
            throw new Error('Required parameter kennel was null or undefined when calling addKennelToRoom.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: kennel,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Adds a new Location to the Rescue
     * @summary adds a Location to the rescue
     * @param location Location to add to the Rescue
     */
    public addLocation (location: models.Location, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'location' is not null or undefined
        if (location === null || location === undefined) {
            throw new Error('Required parameter location was null or undefined when calling addLocation.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: location,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Adds a new Room to the specified Location
     * @summary creates a Room in the specified Building
     * @param locationId 
     * @param buildingId 
     * @param room Room to create
     */
    public addRoomToBuilding (locationId: string, buildingId: string, room: models.Room, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/rooms'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling addRoomToBuilding.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling addRoomToBuilding.');
        }

        // verify required parameter 'room' is not null or undefined
        if (room === null || room === undefined) {
            throw new Error('Required parameter room was null or undefined when calling addRoomToBuilding.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: room,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * adds a Cat with a unique id
     * @summary creates a new Cat
     * @param catToCreate full Cat object with new id
     */
    public createCat (catToCreate?: models.Cat, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/cats';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: catToCreate,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * adds a Dog with a unique id
     * @summary creates a new Contact
     * @param dogToCreate full Contact object with new id
     */
    public createContact (dogToCreate?: models.Contact, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/contacts';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: dogToCreate,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * adds a Dog with a unique id
     * @summary creates a new Dog
     * @param dogToCreate full Dog object with new id
     */
    public createDog (dogToCreate?: models.Dog, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/dogs';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: dogToCreate,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * creates a new, unique Donor
     * @summary creates new Donor with a unique id
     * @param createDonor new Donor object
     */
    public createDonor (createDonor: models.Donor, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/donors';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'createDonor' is not null or undefined
        if (createDonor === null || createDonor === undefined) {
            throw new Error('Required parameter createDonor was null or undefined when calling createDonor.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: createDonor,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * creates a new, unique Foster
     * @summary creates new Foster with a unique id
     * @param createFoster new Foster object
     */
    public createFoster (createFoster: models.Foster, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fosters';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'createFoster' is not null or undefined
        if (createFoster === null || createFoster === undefined) {
            throw new Error('Required parameter createFoster was null or undefined when calling createFoster.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: createFoster,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * creates a new, unique Volunteer
     * @summary creates new Volunteer with a unique id
     * @param createVolunteer new Volunteer object
     */
    public createVolunteer (createVolunteer: models.Volunteer, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/volunteers';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'createVolunteer' is not null or undefined
        if (createVolunteer === null || createVolunteer === undefined) {
            throw new Error('Required parameter createVolunteer was null or undefined when calling createVolunteer.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: createVolunteer,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Building at a Location by id
     * @summary deletes a Building from a Location by id
     * @param locationId 
     * @param buildingId 
     */
    public deleteBuildingAtLocationById (locationId: string, buildingId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling deleteBuildingAtLocationById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling deleteBuildingAtLocationById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Cat by id
     * @summary retrieves a Cat by id
     * @param id 
     */
    public deleteCatById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/cats/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCatById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Contact by id
     * @summary retrieves a Contact by id
     * @param id 
     */
    public deleteContactById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/contacts/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteContactById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Dog by id
     * @summary retrieves a Dog by id
     * @param id 
     */
    public deleteDogById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/dogs/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteDogById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Donor by id
     * @summary retrieves a Donor by id
     * @param id 
     */
    public deleteDonorById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/donors/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteDonorById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Enclosure by id
     * @summary deletes a Enclosure by id
     * @param id 
     */
    public deleteEnclosureById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/enclosures/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteEnclosureById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Foster by id
     * @summary retrieves a Foster by id
     * @param id 
     */
    public deleteFosterById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fosters/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteFosterById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Kennel by id
     * @summary deletes a Kennel by id
     * @param id 
     */
    public deleteKennelById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/kennels/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteKennelById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Kennel from a Room by id
     * @summary deletes a Kennel by id
     * @param locationId 
     * @param buildingId 
     * @param roomId 
     * @param kennelId 
     */
    public deleteKennelFromRoomById (locationId: string, buildingId: string, roomId: string, kennelId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)))
            .replace('{' + 'roomId' + '}', encodeURIComponent(String(roomId)))
            .replace('{' + 'kennelId' + '}', encodeURIComponent(String(kennelId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling deleteKennelFromRoomById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling deleteKennelFromRoomById.');
        }

        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling deleteKennelFromRoomById.');
        }

        // verify required parameter 'kennelId' is not null or undefined
        if (kennelId === null || kennelId === undefined) {
            throw new Error('Required parameter kennelId was null or undefined when calling deleteKennelFromRoomById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Location by id
     * @summary deletes a Location by id
     * @param id 
     */
    public deleteLocationById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteLocationById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Building at a Room by id
     * @summary deletes a Room by id
     * @param locationId 
     * @param buildingId 
     * @param roomId 
     */
    public deleteRoomFromBuildingById (locationId: string, buildingId: string, roomId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/rooms/{roomId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)))
            .replace('{' + 'roomId' + '}', encodeURIComponent(String(roomId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling deleteRoomFromBuildingById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling deleteRoomFromBuildingById.');
        }

        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling deleteRoomFromBuildingById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Deletes an existing Volunteer by id
     * @summary retrieves a Volunteer by id
     * @param id 
     */
    public deleteVolunteerById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/volunteers/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteVolunteerById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Returns details about a specific Room 
     * @summary returns a specific location for the Rescue
     * @param locationId 
     * @param buildingId 
     * @param roomId 
     * @param kennelId 
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public geKennelFromRoomById (locationId: string, buildingId: string, roomId: string, kennelId: string, limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Kennel> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)))
            .replace('{' + 'roomId' + '}', encodeURIComponent(String(roomId)))
            .replace('{' + 'kennelId' + '}', encodeURIComponent(String(kennelId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling geKennelFromRoomById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling geKennelFromRoomById.');
        }

        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling geKennelFromRoomById.');
        }

        // verify required parameter 'kennelId' is not null or undefined
        if (kennelId === null || kennelId === undefined) {
            throw new Error('Required parameter kennelId was null or undefined when calling geKennelFromRoomById.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * used to check on the api status
     * @summary reports whether the API is up and running
     */
    public getApiHealth (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/health';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Returns details about a specific Location 
     * @summary returns a specific location for the Rescue
     * @param locationId 
     * @param buildingId 
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getBuildingAtLocationById (locationId: string, buildingId: string, limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Location> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getBuildingAtLocationById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling getBuildingAtLocationById.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all Buildings at the specified Location 
     * @summary returns all buildings at a Location
     * @param locationId 
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getBuildingsAtLocation (locationId: string, limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Building>> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getBuildingsAtLocation.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Gets an existing Cat by id
     * @summary retrieves a Cat by id
     * @param id 
     */
    public getCatById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Cat> {
        const localVarPath = this.basePath + '/cats/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCatById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Gets an existing Contact by id
     * @summary retrieves a Contact by id
     * @param id 
     */
    public getContactById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Contact> {
        const localVarPath = this.basePath + '/contacts/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getContactById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Given a state, return an alpha list of counties in that state
     * @summary retrieves counties for the provided state
     * @param state state to retrieve counties for
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getCountiesByState (state: string, limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<string>> {
        const localVarPath = this.basePath + '/counties';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'state' is not null or undefined
        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling getCountiesByState.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (state !== undefined) {
            queryParameters['state'] = state;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Gets an existing Dog by id
     * @summary retrieves a Dog by id
     * @param id 
     */
    public getDogById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Dog> {
        const localVarPath = this.basePath + '/dogs/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDogById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Gets an existing Donor by id
     * @summary retrieves a Donor by id
     * @param id 
     */
    public getDonorById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Donor> {
        const localVarPath = this.basePath + '/donors/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDonorById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all Donors. Allows filters. 
     * @summary searches animal rescue doners
     * @param state state to retrieve counties for
     * @param searchString pass an optional search string for looking up Fosters
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     * @param fromDate Specifies the first intake date to return
     */
    public getDonors (state: string, searchString?: string, limit?: number, offset?: number, fromDate?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Donor>> {
        const localVarPath = this.basePath + '/donors';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'state' is not null or undefined
        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling getDonors.');
        }

        if (searchString !== undefined) {
            queryParameters['searchString'] = searchString;
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (fromDate !== undefined) {
            queryParameters['fromDate'] = fromDate;
        }

        if (state !== undefined) {
            queryParameters['state'] = state;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Returns details about a specific Enclosure 
     * @summary returns a specific Enclosure for the Rescue
     * @param id 
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getEnclosureById (id: string, limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Enclosure> {
        const localVarPath = this.basePath + '/enclosures/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEnclosureById.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all Enclosures for the Rescue 
     * @summary searches all Enclosures for the Rescue
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getEnclosures (limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Enclosure>> {
        const localVarPath = this.basePath + '/enclosures';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Gets an existing Foster by id
     * @summary retrieves a Foster by id
     * @param id 
     */
    public getFosterById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Foster> {
        const localVarPath = this.basePath + '/fosters/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFosterById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Returns details about a specific Kennel 
     * @summary returns a specific location for the Rescue
     * @param id 
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getKennelById (id: string, limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Kennel> {
        const localVarPath = this.basePath + '/kennels/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getKennelById.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all Kennels for the Rescue 
     * @summary searches all Kennels for the Rescue
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getKennels (limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Kennel>> {
        const localVarPath = this.basePath + '/kennels';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all kennels in a Room
     * @summary returns all kennels in a Room
     * @param locationId 
     * @param buildingId 
     * @param roomId 
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getKennelsInRoom (locationId: string, buildingId: string, roomId: string, limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Kennel>> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/room/{roomId}/kennels'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)))
            .replace('{' + 'roomId' + '}', encodeURIComponent(String(roomId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getKennelsInRoom.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling getKennelsInRoom.');
        }

        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling getKennelsInRoom.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Returns details about a specific Location 
     * @summary returns a specific location for the Rescue
     * @param id 
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getLocationById (id: string, limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Location> {
        const localVarPath = this.basePath + '/locations/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getLocationById.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all Locations for the Rescue 
     * @summary searches all locations for the Rescue
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getLocations (limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Location>> {
        const localVarPath = this.basePath + '/locations';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Returns details about a specific Room 
     * @summary returns a specific location for the Rescue
     * @param locationId 
     * @param buildingId 
     * @param roomId 
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getRoomInBuildingById (locationId: string, buildingId: string, roomId: string, limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Room> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/rooms/{roomId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)))
            .replace('{' + 'roomId' + '}', encodeURIComponent(String(roomId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getRoomInBuildingById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling getRoomInBuildingById.');
        }

        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling getRoomInBuildingById.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all Rooms in a Building
     * @summary gets all Rooms in a Building at a Location
     * @param locationId 
     * @param buildingId 
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     */
    public getRoomsInBuilding (locationId: string, buildingId: string, limit?: number, offset?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Room>> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/rooms'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getRoomsInBuilding.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling getRoomsInBuilding.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Gets an existing Volunteer by id
     * @summary retrieves a Volunteer by id
     * @param id 
     */
    public getVolunteerById (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Volunteer> {
        const localVarPath = this.basePath + '/volunteers/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getVolunteerById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Base endopoints returns and empty Intake array
     * @summary support for animal intake process
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     * @param fromDate Specifies the first intake date to return
     */
    public intakeInformation (limit?: number, offset?: number, fromDate?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Intake>> {
        const localVarPath = this.basePath + '/intakes';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (fromDate !== undefined) {
            queryParameters['fromDate'] = fromDate;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Location by id with only elements that are changing
     * @summary updates a Location by id
     * @param locationId 
     * @param buildingId 
     * @param patchBuilding partial json object of Location with fields to patch
     */
    public patchBuildingAtLocationById (locationId: string, buildingId: string, patchBuilding: models.Building, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling patchBuildingAtLocationById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling patchBuildingAtLocationById.');
        }

        // verify required parameter 'patchBuilding' is not null or undefined
        if (patchBuilding === null || patchBuilding === undefined) {
            throw new Error('Required parameter patchBuilding was null or undefined when calling patchBuildingAtLocationById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchBuilding,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Cat by id with only elements that are changing
     * @summary updates a Cat by id
     * @param id unique id of Cat to patch
     * @param patchCat partial json object of Cat with fields to patch
     */
    public patchCatById (id: string, patchCat: models.Cat, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/cats/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchCatById.');
        }

        // verify required parameter 'patchCat' is not null or undefined
        if (patchCat === null || patchCat === undefined) {
            throw new Error('Required parameter patchCat was null or undefined when calling patchCatById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchCat,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Contact by id with only elements that are changing
     * @summary updates a Contact by id
     * @param id unique id of Contact to patch
     * @param patchContact partial json object of Contact with fields to patch
     */
    public patchContactById (id: string, patchContact: models.Contact, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/contacts/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchContactById.');
        }

        // verify required parameter 'patchContact' is not null or undefined
        if (patchContact === null || patchContact === undefined) {
            throw new Error('Required parameter patchContact was null or undefined when calling patchContactById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchContact,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Dog by id with only elements that are changing
     * @summary updates a Dog by id
     * @param id unique id of Dog to patch
     * @param patchDog partial json object of Dog with fields to patch
     */
    public patchDogById (id: string, patchDog: models.Dog, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/dogs/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchDogById.');
        }

        // verify required parameter 'patchDog' is not null or undefined
        if (patchDog === null || patchDog === undefined) {
            throw new Error('Required parameter patchDog was null or undefined when calling patchDogById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchDog,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Donor by id with only elements that are changing
     * @summary updates a Donor by id
     * @param id unique id of Donor to patch
     * @param patchDonor partial json object of Donor with fields to patch
     */
    public patchDonorById (id: string, patchDonor: models.Donor, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/donors/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchDonorById.');
        }

        // verify required parameter 'patchDonor' is not null or undefined
        if (patchDonor === null || patchDonor === undefined) {
            throw new Error('Required parameter patchDonor was null or undefined when calling patchDonorById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchDonor,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Enclosure by id with only elements that are changing
     * @summary updates a Enclosure by id
     * @param id unique id of Enclosure to patch
     * @param patchEnclosure partial json object of Enclosure with fields to patch
     */
    public patchEnclosureById (id: string, patchEnclosure: models.Enclosure, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/enclosures/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchEnclosureById.');
        }

        // verify required parameter 'patchEnclosure' is not null or undefined
        if (patchEnclosure === null || patchEnclosure === undefined) {
            throw new Error('Required parameter patchEnclosure was null or undefined when calling patchEnclosureById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchEnclosure,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Foster by id with only elements that are changing
     * @summary updates a Foster by id
     * @param id unique id of Foster to patch
     * @param patchFoster partial json object of Foster with fields to patch
     */
    public patchFosterById (id: string, patchFoster: models.Foster, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fosters/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchFosterById.');
        }

        // verify required parameter 'patchFoster' is not null or undefined
        if (patchFoster === null || patchFoster === undefined) {
            throw new Error('Required parameter patchFoster was null or undefined when calling patchFosterById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchFoster,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Kennel by id with only elements that are changing
     * @summary updates a Kennel by id
     * @param id unique id of Kennel to patch
     * @param patchKennel partial json object of Kennel with fields to patch
     */
    public patchKennelById (id: string, patchKennel: models.Kennel, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/kennels/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchKennelById.');
        }

        // verify required parameter 'patchKennel' is not null or undefined
        if (patchKennel === null || patchKennel === undefined) {
            throw new Error('Required parameter patchKennel was null or undefined when calling patchKennelById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchKennel,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Kennel by id with only elements that are changing
     * @summary updates a Kennel by id
     * @param locationId 
     * @param buildingId 
     * @param roomId 
     * @param kennelId 
     * @param patchKennel partial json object of Kennel with fields to patch
     */
    public patchKennelInRoomById (locationId: string, buildingId: string, roomId: string, kennelId: string, patchKennel: models.Kennel, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)))
            .replace('{' + 'roomId' + '}', encodeURIComponent(String(roomId)))
            .replace('{' + 'kennelId' + '}', encodeURIComponent(String(kennelId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling patchKennelInRoomById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling patchKennelInRoomById.');
        }

        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling patchKennelInRoomById.');
        }

        // verify required parameter 'kennelId' is not null or undefined
        if (kennelId === null || kennelId === undefined) {
            throw new Error('Required parameter kennelId was null or undefined when calling patchKennelInRoomById.');
        }

        // verify required parameter 'patchKennel' is not null or undefined
        if (patchKennel === null || patchKennel === undefined) {
            throw new Error('Required parameter patchKennel was null or undefined when calling patchKennelInRoomById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchKennel,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Location by id with only elements that are changing
     * @summary updates a Location by id
     * @param id unique id of Location to patch
     * @param patchLocation partial json object of Location with fields to patch
     */
    public patchLocationById (id: string, patchLocation: models.Location, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchLocationById.');
        }

        // verify required parameter 'patchLocation' is not null or undefined
        if (patchLocation === null || patchLocation === undefined) {
            throw new Error('Required parameter patchLocation was null or undefined when calling patchLocationById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchLocation,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Room by id with only elements that are changing
     * @summary updates a Room by id
     * @param locationId 
     * @param buildingId 
     * @param roomId 
     * @param patchRoom partial json object of Room with fields to patch
     */
    public patchRoomInBuildingById (locationId: string, buildingId: string, roomId: string, patchRoom: models.Room, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/rooms/{roomId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)))
            .replace('{' + 'roomId' + '}', encodeURIComponent(String(roomId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling patchRoomInBuildingById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling patchRoomInBuildingById.');
        }

        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling patchRoomInBuildingById.');
        }

        // verify required parameter 'patchRoom' is not null or undefined
        if (patchRoom === null || patchRoom === undefined) {
            throw new Error('Required parameter patchRoom was null or undefined when calling patchRoomInBuildingById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchRoom,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Volunteer by id with only elements that are changing
     * @summary updates a Volunteer by id
     * @param id unique id of Volunteer to patch
     * @param patchVolunteer partial json object of Volunteer with fields to patch
     */
    public patchVolunteerById (id: string, patchVolunteer: models.Volunteer, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/volunteers/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchVolunteerById.');
        }

        // verify required parameter 'patchVolunteer' is not null or undefined
        if (patchVolunteer === null || patchVolunteer === undefined) {
            throw new Error('Required parameter patchVolunteer was null or undefined when calling patchVolunteerById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: patchVolunteer,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all Buildings at the Rescue 
     * @summary searches all buildings at the Rescue
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     * @param fromDate Specifies the first intake date to return
     */
    public searchAdoptions (limit?: number, offset?: number, fromDate?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Building>> {
        const localVarPath = this.basePath + '/adoptions';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (fromDate !== undefined) {
            queryParameters['fromDate'] = fromDate;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all cats currently in the shelter. Allows filters. 
     * @summary searches cats
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     * @param fromDate Specifies the first intake date to return
     * @param name Specifies a matching pattern for the name
     * @param adoptionStatus Specifies one of the valid AdoptionStatus values
     * @param breed breed of cat to retrieve
     * @param color Specifies one of the valid CatColors
     * @param gender Specifies on of the valid Gender
     */
    public searchCats (limit?: number, offset?: number, fromDate?: string, name?: string, adoptionStatus?: string, breed?: string, color?: string, gender?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Cat>> {
        const localVarPath = this.basePath + '/cats';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (fromDate !== undefined) {
            queryParameters['fromDate'] = fromDate;
        }

        if (name !== undefined) {
            queryParameters['name'] = name;
        }

        if (adoptionStatus !== undefined) {
            queryParameters['adoptionStatus'] = adoptionStatus;
        }

        if (breed !== undefined) {
            queryParameters['breed'] = breed;
        }

        if (color !== undefined) {
            queryParameters['color'] = color;
        }

        if (gender !== undefined) {
            queryParameters['gender'] = gender;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all contacts associated with the Rescue. Allows filters. 
     * @summary searches Contact
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     * @param fromDate Specifies the first intake date to return
     * @param name Specifies a matching pattern for the name
     * @param gender Specifies on of the valid Gender
     */
    public searchContact (limit?: number, offset?: number, fromDate?: string, name?: string, gender?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Contact>> {
        const localVarPath = this.basePath + '/contacts';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (fromDate !== undefined) {
            queryParameters['fromDate'] = fromDate;
        }

        if (name !== undefined) {
            queryParameters['name'] = name;
        }

        if (gender !== undefined) {
            queryParameters['gender'] = gender;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all dogss currently in the shelter. Allows filters. 
     * @summary searches dogs
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     * @param fromDate Specifies the first intake date to return
     * @param name Specifies a matching pattern for the name
     * @param adoptionStatus Specifies one of the valid AdoptionStatus values
     * @param breed breed of dog to retrieve
     * @param color Specifies one of the valid DogColors
     * @param gender Specifies on of the valid Gender
     */
    public searchDog (limit?: number, offset?: number, fromDate?: string, name?: string, adoptionStatus?: string, breed?: string, color?: string, gender?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Dog>> {
        const localVarPath = this.basePath + '/dogs';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (fromDate !== undefined) {
            queryParameters['fromDate'] = fromDate;
        }

        if (name !== undefined) {
            queryParameters['name'] = name;
        }

        if (adoptionStatus !== undefined) {
            queryParameters['adoptionStatus'] = adoptionStatus;
        }

        if (breed !== undefined) {
            queryParameters['breed'] = breed;
        }

        if (color !== undefined) {
            queryParameters['color'] = color;
        }

        if (gender !== undefined) {
            queryParameters['gender'] = gender;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all registered Fosters. Allows filters. 
     * @summary searches animal fosters
     * @param searchString pass an optional search string for looking up Fosters
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     * @param fromDate Specifies the first intake date to return
     */
    public searchFosters (searchString?: string, limit?: number, offset?: number, fromDate?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Foster>> {
        const localVarPath = this.basePath + '/fosters';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (searchString !== undefined) {
            queryParameters['searchString'] = searchString;
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (fromDate !== undefined) {
            queryParameters['fromDate'] = fromDate;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @summary searches inventory
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     * @param searchString pass an optional search string for looking up inventory
     */
    public searchInventory (limit?: number, offset?: number, searchString?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.InventoryItem>> {
        const localVarPath = this.basePath + '/inventory';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (searchString !== undefined) {
            queryParameters['searchString'] = searchString;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * With no parameters, returns all registered Volunteers. Allows filters. 
     * @summary searches volunteers
     * @param searchString pass an optional search string for looking up Fosters
     * @param limit Limits the number of items on a page
     * @param offset Specifies the page number of the artists to be displayed
     * @param fromDate Specifies the first intake date to return
     */
    public searchVolunteers (searchString?: string, limit?: number, offset?: number, fromDate?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Volunteer>> {
        const localVarPath = this.basePath + '/volunteers';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (searchString !== undefined) {
            queryParameters['searchString'] = searchString;
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (fromDate !== undefined) {
            queryParameters['fromDate'] = fromDate;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Location by id
     * @summary updates a Location by id
     * @param locationId 
     * @param buildingId 
     * @param updateBuilding unique id of Location to update
     */
    public updateBuildingAtLocationById (locationId: string, buildingId: string, updateBuilding: models.Building, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateBuildingAtLocationById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling updateBuildingAtLocationById.');
        }

        // verify required parameter 'updateBuilding' is not null or undefined
        if (updateBuilding === null || updateBuilding === undefined) {
            throw new Error('Required parameter updateBuilding was null or undefined when calling updateBuildingAtLocationById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateBuilding,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Cat by id
     * @summary updates a Cat by id
     * @param id 
     * @param updateCat unique id of Cat to update
     */
    public updateCatById (id: string, updateCat: models.Cat, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/cats/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCatById.');
        }

        // verify required parameter 'updateCat' is not null or undefined
        if (updateCat === null || updateCat === undefined) {
            throw new Error('Required parameter updateCat was null or undefined when calling updateCatById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateCat,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Contact by id
     * @summary updates a Contact by id
     * @param id 
     * @param updateContact unique id of Contact to update
     */
    public updateContactById (id: string, updateContact: models.Contact, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/contacts/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateContactById.');
        }

        // verify required parameter 'updateContact' is not null or undefined
        if (updateContact === null || updateContact === undefined) {
            throw new Error('Required parameter updateContact was null or undefined when calling updateContactById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateContact,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Dog by id
     * @summary updates a Dog by id
     * @param id 
     * @param updateDog unique id of Dog to update
     */
    public updateDogById (id: string, updateDog: models.Dog, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/dogs/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDogById.');
        }

        // verify required parameter 'updateDog' is not null or undefined
        if (updateDog === null || updateDog === undefined) {
            throw new Error('Required parameter updateDog was null or undefined when calling updateDogById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateDog,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Donor by id
     * @summary updates a Donor by id
     * @param id 
     * @param updateDonor unique id of Donor to update
     */
    public updateDonorById (id: string, updateDonor: models.Donor, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/donors/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDonorById.');
        }

        // verify required parameter 'updateDonor' is not null or undefined
        if (updateDonor === null || updateDonor === undefined) {
            throw new Error('Required parameter updateDonor was null or undefined when calling updateDonorById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateDonor,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Enclosure by id
     * @summary updates a Enclosure by id
     * @param id 
     * @param updateEnclosure unique id of Enclosure to update
     */
    public updateEnclosureById (id: string, updateEnclosure: models.Enclosure, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/enclosures/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateEnclosureById.');
        }

        // verify required parameter 'updateEnclosure' is not null or undefined
        if (updateEnclosure === null || updateEnclosure === undefined) {
            throw new Error('Required parameter updateEnclosure was null or undefined when calling updateEnclosureById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateEnclosure,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Foster by id
     * @summary updates a Foster by id
     * @param id 
     * @param updateFoster unique id of Foster to update
     */
    public updateFosterById (id: string, updateFoster: models.Foster, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fosters/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateFosterById.');
        }

        // verify required parameter 'updateFoster' is not null or undefined
        if (updateFoster === null || updateFoster === undefined) {
            throw new Error('Required parameter updateFoster was null or undefined when calling updateFosterById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateFoster,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Location by id
     * @summary updates a Kennel by id
     * @param id 
     * @param updateKennel unique id of Kennel to update
     */
    public updateKennelById (id: string, updateKennel: models.Kennel, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/kennels/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateKennelById.');
        }

        // verify required parameter 'updateKennel' is not null or undefined
        if (updateKennel === null || updateKennel === undefined) {
            throw new Error('Required parameter updateKennel was null or undefined when calling updateKennelById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateKennel,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Kennel in a Room by id
     * @summary updates a Kennel by id
     * @param locationId 
     * @param buildingId 
     * @param roomId 
     * @param kennelId 
     * @param updateKennel unique id of Kennel to update
     */
    public updateKennelInRoomById (locationId: string, buildingId: string, roomId: string, kennelId: string, updateKennel: models.Kennel, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)))
            .replace('{' + 'roomId' + '}', encodeURIComponent(String(roomId)))
            .replace('{' + 'kennelId' + '}', encodeURIComponent(String(kennelId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateKennelInRoomById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling updateKennelInRoomById.');
        }

        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling updateKennelInRoomById.');
        }

        // verify required parameter 'kennelId' is not null or undefined
        if (kennelId === null || kennelId === undefined) {
            throw new Error('Required parameter kennelId was null or undefined when calling updateKennelInRoomById.');
        }

        // verify required parameter 'updateKennel' is not null or undefined
        if (updateKennel === null || updateKennel === undefined) {
            throw new Error('Required parameter updateKennel was null or undefined when calling updateKennelInRoomById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateKennel,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Location by id
     * @summary updates a Location by id
     * @param id 
     * @param updateLocation unique id of Location to update
     */
    public updateLocationById (id: string, updateLocation: models.Location, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateLocationById.');
        }

        // verify required parameter 'updateLocation' is not null or undefined
        if (updateLocation === null || updateLocation === undefined) {
            throw new Error('Required parameter updateLocation was null or undefined when calling updateLocationById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateLocation,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Room by id
     * @summary updates a Room by id
     * @param locationId 
     * @param buildingId 
     * @param roomId 
     * @param updateRoom unique id of Room to update
     */
    public updateRoomInBuildingById (locationId: string, buildingId: string, roomId: string, updateRoom: models.Room, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/locations/{locationId}/buildings/{buildingId}/rooms/{roomId}'
            .replace('{' + 'locationId' + '}', encodeURIComponent(String(locationId)))
            .replace('{' + 'buildingId' + '}', encodeURIComponent(String(buildingId)))
            .replace('{' + 'roomId' + '}', encodeURIComponent(String(roomId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateRoomInBuildingById.');
        }

        // verify required parameter 'buildingId' is not null or undefined
        if (buildingId === null || buildingId === undefined) {
            throw new Error('Required parameter buildingId was null or undefined when calling updateRoomInBuildingById.');
        }

        // verify required parameter 'roomId' is not null or undefined
        if (roomId === null || roomId === undefined) {
            throw new Error('Required parameter roomId was null or undefined when calling updateRoomInBuildingById.');
        }

        // verify required parameter 'updateRoom' is not null or undefined
        if (updateRoom === null || updateRoom === undefined) {
            throw new Error('Required parameter updateRoom was null or undefined when calling updateRoomInBuildingById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateRoom,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Updates an existing Volunteer by id
     * @summary updates a Volunteer by id
     * @param id 
     * @param updateFoster unique id of Volunteer to update
     */
    public updateVolunteerById (id: string, updateFoster: models.Volunteer, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/volunteers/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateVolunteerById.');
        }

        // verify required parameter 'updateFoster' is not null or undefined
        if (updateFoster === null || updateFoster === undefined) {
            throw new Error('Required parameter updateFoster was null or undefined when calling updateVolunteerById.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: updateFoster,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
